---
layout:     post
title:      "简约tensorflow第一节：基本概念"
subtitle:   ""
date:       2017-01-17
author:     "wykhan"
header-img: "img/post-bg-os-metro.jpg"
catalog: tool
tags:
    - nutshell
    - 入门
---


## TensorFlow In a Nutshell
> The fast and easy guide to the most popular Deep Learning framework in the world         

TensorFlow In a Nutshell 是我见过的最简洁的入门系列。这是它的[链接](http://camron.xyz/index.php/2016/08/22/in_a_nutshell_part_one/)。我会把它的主要内容整理在这里。   
![Alt text](/img/tensorflow_nutshell-1-432x270.png)    

---

## 四则运算

tf安好后，简单的计算功能就能实现了

```python
>>> import tensorflow as tf
>>> tf.add(1, 2)
#3
>>> tf.sub(2, 1)
# 1
>>> tf.mul(2, 2)
# 4
>>> tf.div(2, 2)
# 1
>>> tf.pow(3, 2)
# 9
```    

---

## 基本概念
接下来说说tensorflow中的基本概念
![enter image description here](https://wykhan.github.io/img/1-mvhm5_r6LY-eHsin21RJTg.png)
这是一个简单的示例，演示如何创建图形（graph）并运行会话（session）。这个会话运行会产生三个操作，创建两个常数，然后矩阵
乘法。
tensorflow正如其名字所叫的，产生张量（数据），让其流动（做运算）。
#### 图（Graph）
在tensorflow中我们创建的常量和操作都会自动添加到图上。图通常是默认创建的，当要在一个文件中创建多个模型，且彼此不相关时，可以自己创建图，而不使用默认的图。

```python
new_graph = tf.Graph()
```
```python
with new_graph.as_default():
	 new_g_const = tf.constant([1., 2.])
```
在newgraph.asdefault() 之外的变量和操作会被添加到默认的图中。
默认的图也可以操作，像这样：

```python
default_g = tf.get_default_graph()
```
大多数情况下默认的图就足够用了。
#### 会话（Session）
TensorFlow中有两种Session对象
**tf.Session()**   
这种会话对操作和张量的执行环境进行了封装。它们会被分配专门的队列和变量，会话结束后需要及时关闭（close）。有三个参数，都是可选的：   
1.target — 要连接到哪个执行引擎   
2.graph — 由哪个图发起   
3.config — 相关配置   
**tf.InteractiveSession()**   
这是为了方便互动专门给IPython 和 Jupyter Notebooks设计的， 让你可以使用Tensor.eval() 和 Operation.run() 计算结果，而不是必须用Session.run()

```python
sess = tf.InteractiveSession()
a = tf.constant(1)
b = tf.constant(2)
c = a + b
# instead of sess.run(c)
c.eval()
```
#### 变量（Variables）
变量是由会话所管理的。可以用tf.Variable()来创建。

```python
tensorflow_var = tf.Variable(1, name="my_variable")
```
很多情况下，你会需要创建全0值 全1值以及随机值
+ tf.zeros() - 创建一个全0的矩阵
+ tf.ones（）- 创建一个全1的矩阵
+ tf.random_normal() - a matrix with random uniform values between an interval
+ tf.random_uniform() - 随机正态分布 
+ tr.truncated_normal() - 和random normal类似，但产生的数都在2倍标准偏差以下    

这些函数具有初始变量，可以定义矩阵的维度。例如：

```python
# 4*4*4 matrix normally distribued mean 0 std 1
normal = tf.truncated_normal([4, 4, 4], mean=0.0, stddev=1.0)
```
将变量设置为这样的帮助函数

```python
normal_var = tf.Variable(tf.truncated_normal([4, 4, 4], mean=0.0, stddev=1.0))
```
当初始化这些变量时，你需要使用专门的初始化函数，并把函数传给会话。当有多个会话时也是一样。

```python
init = tf.initialize_all_variables()
sess = tf.Session()
sess.run(init)
```
当你想改变变量值的时候，你可以使用Variable.assigh()。它必须传到回话里才能生效。

```python
initial_var = tf.Variable(1)
```
```python
changed_var = initial_var.assign(initial_var + initial_var)
```
```python
init = tf.initialize_all_variables()
sess = tf.Session()
sess.run(init)
```
```python
sess.run(changed_var)
# 2
```
```python
sess.run(changed_var)
# 3
```
```python
sess.run(changed_var)
# 4
```
有时你想在模型里加一个计数器，你可以使用Variable.assign_add()方法。同样的，减的时候有Variable.assign_sub()

```python
counter = tf.Variable(0)
```
```python
sess.run(counter.assign_add(1))
# 1
```
```python
sess.run(counter.assign_sub(1))
# -1
```
#### 域（Scope）
域是为了控制模型的复杂性，并将他们分割成独立的模块。域可以彼此嵌套。

```python
with tf.name_scope("Scope1"):
  with tf.name_scope("Scope_nested"):
    nested_var = tf.mul(5, 5)
```
域和TensorBoard连用时会非常有用。




